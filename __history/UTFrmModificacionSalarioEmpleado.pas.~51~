unit UTFrmModificacionSalarioEmpleado;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ClientModuleUnit1, UInteliDialog, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxStyles, dxSkinsCore, dxSkinBlack,
  dxSkinBlue, dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom,
  dxSkinDarkSide, dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic,
  dxSkinSharp, dxSkinSharpPlus, dxSkinSilver, dxSkinSpringTime, dxSkinStardust,
  dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinVS2010, dxSkinWhiteprint, dxSkinXmas2008Blue,
  dxSkinscxPCPainter, cxCustomData, cxFilter, cxData, cxDataStorage, cxEdit,
  cxNavigator, DB, cxDBData, cxGridLevel, cxClasses, cxGridCustomView,
  cxGridCustomTableView, cxGridTableView, cxGridDBTableView, cxGrid, StdCtrls,
  JvExControls, JvLabel, ExtCtrls, DBClient, AdvGlowButton, URegistro,
  cxCurrencyEdit, cxCalc;

type
  TFrmModificacionSalarioEmpleado = class(TForm)
    cdAnalisis: TClientDataSet;
    cdTipoNomina: TClientDataSet;
    Panel1: TPanel;
    JvLabel1: TJvLabel;
    cbIdOrganizacion: TComboBox;
    JvLabel2: TJvLabel;
    cbIdTipoNomina: TComboBox;
    Panel2: TPanel;
    tvAnalisis: TcxGridDBTableView;
    GridAnalisisLevel1: TcxGridLevel;
    GridAnalisis: TcxGrid;
    btnAnalizar: TAdvGlowButton;
    dsAnalisis: TDataSource;
    ColNombreCompleto: TcxGridDBColumn;
    ColTituloCargo: TcxGridDBColumn;
    ColTituloDepartamento: TcxGridDBColumn;
    ColFechaMovimiento: TcxGridDBColumn;
    ColUltimoMovimiento: TcxGridDBColumn;
    ColFechaUltimoMovimiento: TcxGridDBColumn;
    ColSalarioDiario: TcxGridDBColumn;
    ColSalarioIntegrado: TcxGridDBColumn;
    ColSalario: TcxGridDBColumn;
    ColFactorIntegracion: TcxGridDBColumn;
    ColSalarioIntegradoMod: TcxGridDBColumn;
    ColIdPersonal: TcxGridDBColumn;
    btnTodos: TAdvGlowButton;
    btnNinguno: TAdvGlowButton;
    btnSeleccionar: TAdvGlowButton;
    btnContinuar: TAdvGlowButton;
    btnCancelar: TAdvGlowButton;
    Panel3: TPanel;
    btnInvertir: TAdvGlowButton;
    memSeleccionados: TClientDataSet;
    btnRegresar: TAdvGlowButton;
    memSeleccionadosIdPersonal: TIntegerField;
    memSeleccionadosAplicacion: TDateField;
    memSeleccionadosSalario: TFloatField;
    memSeleccionadosIntegrado: TFloatField;
    memSeleccionadosNombreCompleto: TStringField;
    memSeleccionadosDepartamento: TStringField;
    memSeleccionadosCargo: TStringField;
    procedure btnAnalizarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure tvAnalisisCustomDrawCell(Sender: TcxCustomGridTableView;
      ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo;
      var ADone: Boolean);
    procedure tvAnalisisDblClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure btnTodosClick(Sender: TObject);
    procedure btnNingunoClick(Sender: TObject);
    procedure btnSeleccionarClick(Sender: TObject);
    procedure cdAnalisisAfterScroll(DataSet: TDataSet);
    procedure btnInvertirClick(Sender: TObject);
    procedure btnContinuarClick(Sender: TObject);
  private
    Seleccionados: TStringList;
  public
    { Public declarations }
  end;

var
  FrmModificacionSalarioEmpleado: TFrmModificacionSalarioEmpleado;

implementation

{$R *.dfm}

procedure TFrmModificacionSalarioEmpleado.btnAnalizarClick(Sender: TObject);
var
  LocCursor: TCursor;
begin
  try
    LocCursor := Screen.Cursor;
    try
      Screen.Cursor := crHourGlass;

      if cbIdOrganizacion.ItemIndex < 0 then
        raise InteligentException.CreateByCode(24, ['Debe seleccionar una Organización']);

      if cbIdTipoNomina.ItemIndex < 0 then
        raise InteligentException.CreateByCode(24, ['Debe seleccionar una Tipo de Nómina']);

      if Not CargarDatosFiltrados(cdAnalisis, 'IdOrganizacion,IdTipoNomina', [Integer(cbIdOrganizacion.Items.Objects[cbIdOrganizacion.ItemIndex]), Integer(cbIdTipoNomina.Items.Objects[cbIdTipoNomina.ItemIndex])]) then
        raise InteligentException.CreateByCode(16, ['Análisis de Modificación de Salarios']);

      if cdAnalisis.Active then
        cdAnalisis.Refresh
      else
        cdAnalisis.Open;

      cdAnalisis.First;
      tvAnalisis.ViewData.Expand(True);
    finally
      Screen.Cursor := LocCursor;
    end;
  except
    on e:InteligentException do
      InteliDialog.ShowModal(e.Title, e.Message, e.MsgType, [mbOk], 0);

    on e:Exception do
      InteliDialog.ShowModal(IDTituloError, IDLabelError + e.Message, mtError, [mbOk], 0);
  end;
end;

procedure TFrmModificacionSalarioEmpleado.btnCancelarClick(Sender: TObject);
begin
  Close;
end;

procedure TFrmModificacionSalarioEmpleado.btnContinuarClick(Sender: TObject);
var
  Marca: TBookMark;
begin
  // Llenar el contenedor de Personal seleccionado
  memSeleccionados.EmptyDataSet;

  try
    Marca := cdAnalisis.Bookmark;
    cdAnalisis.DisableControls;
    cdAnalisis.First;
    while Not cdAnalisis.Eof do
    begin
      if Seleccionados.IndexOf(cdAnalisis.FieldByName('IdPersonal').AsString) > -1 then
      begin
        memSeleccionados.Append;
        memSeleccionados.FieldByName('IdPersonal').AsInteger := cdAnalisis.FieldByName('IdPersonal').AsInteger;
        memSeleccionados.FieldByName('Aplicacion').AsDateTime := Now;
        memSeleccionados.FieldByName('Salario').AsFloat := cdAnalisis.FieldByName('Salario').AsInteger;
        memSeleccionados.FieldByName('Integrado').AsInteger := cdAnalisis.FieldByName('SalarioIntegradoMod').AsInteger;
        memSeleccionados.FieldByName('NombreCompleto').AsInteger := cdAnalisis.FieldByName('NombreCompleto').AsInteger;
        memSeleccionados.FieldByName('Departamento').AsInteger := cdAnalisis.FieldByName('TituloDepartamento').AsInteger;
        memSeleccionados.FieldByName('Cargo').AsInteger := cdAnalisis.FieldByName('TituloCargo').AsInteger;
      end;
      cdAnalisis.Next;
    end;
  finally
    if cdAnalisis.BookmarkValid(Marca) then
      cdAnalisis.GotoBookmark(Marca);
    cdAnalisis.EnableControls;
  end;
  GridAnalisis.Visible := False;
  GridAnalisis.Visible := True;
end;

procedure TFrmModificacionSalarioEmpleado.btnInvertirClick(Sender: TObject);
var
  Marca: TBookMark;
begin
  try
    Marca := cdAnalisis.Bookmark;
    cdAnalisis.DisableControls;
    cdAnalisis.First;
    while Not cdAnalisis.Eof do
    begin
      if Seleccionados.IndexOf(cdAnalisis.FieldByName('IdPersonal').AsString) > -1 then
        Seleccionados.Delete(Seleccionados.IndexOf(cdAnalisis.FieldByName('IdPersonal').AsString))
      else
        Seleccionados.Add(cdAnalisis.FieldByName('IdPersonal').AsString);
      cdAnalisis.Next;
    end;
  finally
    if cdAnalisis.BookmarkValid(Marca) then
      cdAnalisis.GotoBookmark(Marca);
    cdAnalisis.EnableControls;
  end;
  GridAnalisis.Visible := False;
  GridAnalisis.Visible := True;
end;

procedure TFrmModificacionSalarioEmpleado.btnNingunoClick(Sender: TObject);
var
  Marca: TBookMark;
begin
  try
    Marca := cdAnalisis.Bookmark;
    cdAnalisis.DisableControls;
    cdAnalisis.First;
    while Not cdAnalisis.Eof do
    begin
      if Seleccionados.IndexOf(cdAnalisis.FieldByName('IdPersonal').AsString) > -1 then
        Seleccionados.Delete(Seleccionados.IndexOf(cdAnalisis.FieldByName('IdPersonal').AsString));
      cdAnalisis.Next;
    end;
  finally
    if cdAnalisis.BookmarkValid(Marca) then
      cdAnalisis.GotoBookmark(Marca);
    cdAnalisis.EnableControls;
  end;
  GridAnalisis.Visible := False;
  GridAnalisis.Visible := True;
end;

procedure TFrmModificacionSalarioEmpleado.btnSeleccionarClick(Sender: TObject);
begin
  tvAnalisisDblClick(tvAnalisis);
end;

procedure TFrmModificacionSalarioEmpleado.btnTodosClick(Sender: TObject);
var
  Marca: TBookMark;
begin
  try
    Marca := cdAnalisis.Bookmark;
    cdAnalisis.DisableControls;
    cdAnalisis.First;
    while Not cdAnalisis.Eof do
    begin
      if Seleccionados.IndexOf(cdAnalisis.FieldByName('IdPersonal').AsString) = -1 then
        Seleccionados.Add(cdAnalisis.FieldByName('IdPersonal').AsString);
      cdAnalisis.Next;
    end;
  finally
    if cdAnalisis.BookmarkValid(Marca) then
      cdAnalisis.GotoBookmark(Marca);
    cdAnalisis.EnableControls;
  end;
  GridAnalisis.Visible := False;
  GridAnalisis.Visible := True;
end;

procedure TFrmModificacionSalarioEmpleado.cdAnalisisAfterScroll(
  DataSet: TDataSet);
begin
  if Seleccionados.IndexOf(DataSet.FieldByName('IdPersonal').AsString) = -1 then
  begin
    btnSeleccionar.Caption := '&Seleccionar';
    btnSeleccionar.ImageIndex := 1;
  end
  else
  begin
    btnSeleccionar.Caption := '&Deseleccionar';
    btnSeleccionar.ImageIndex := 9;
  end;
end;

procedure TFrmModificacionSalarioEmpleado.FormClose(Sender: TObject;
  var Action: TCloseAction);
var
  i: Integer;
begin
  for i := 0 to tvAnalisis.ColumnCount -1 do
    SetRegistry('\Ventanas', '\' + Self.Name + '\tvAnalisis', tvAnalisis.Columns[i].Name, IntToStr(tvAnalisis.Columns[i].Width));

  SetRegistry('\Ventanas', '\' + Self.Name, 'Top', IntToStr(Self.Top));
  SetRegistry('\Ventanas', '\' + Self.Name, 'Left', IntToStr(Self.Left));
  SetRegistry('\Ventanas', '\' + Self.Name, 'Height', IntToStr(Self.Height));
  SetRegistry('\Ventanas', '\' + Self.Name, 'Width', IntToStr(Self.Width));

  EliminarConjunto([cdAnalisis, cdTipoNomina]);
  Action := caFree;
end;

procedure TFrmModificacionSalarioEmpleado.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  CanClose := InteliDialog.ShowModal('Terminar proceso', '¿Está seguro que desea terminar el proceso ahora?', mtConfirmation,  [mbYes, mbNo], 0) = mrYes;
end;

procedure TFrmModificacionSalarioEmpleado.FormShow(Sender: TObject);
var
  LocCursor: TCursor;
  Marca: TBookMark;
  i: Integer;
begin
  try
    LocCursor := Screen.Cursor;
    try
      Screen.Cursor := crHourGlass;

      for i := 0 to tvAnalisis.ColumnCount -1 do
        try
          tvAnalisis.Columns[i].Width := StrToInt(VarRegistry('\Ventanas', '\' + Self.Name + '\tvAnalisis', tvAnalisis.Columns[i].Name));
        except
          tvAnalisis.Columns[i].Width := 80;
        end;

      try
        Self.Top := StrToInt(VarRegistry('\Ventanas', '\' + Self.Name, 'Left'));
      except
        ;
      end;

      try
        Self.Left := StrToInt(VarRegistry('\Ventanas', '\' + Self.Name, 'Left'));
      except
        ;
      end;

      try
        Self.Height := StrToInt(VarRegistry('\Ventanas', '\' + Self.Name, 'Height'));
      except
        ;
      end;

      try
        Self.Width := StrToInt(VarRegistry('\Ventanas', '\' + Self.Name, 'Width'));
      except
        ;
      end;

      if Not CrearConjunto(cdAnalisis, 'nom_modificacionpersonal', ccSelect) then
        raise InteligentException.CreateByCode(5, ['Análisis de Modificación de Salarios']);

      if Not CrearConjunto(cdTipoNomina, 'nom_tiponomina', ccCatalog) then
        raise InteligentException.CreateByCode(5, ['Tipos de Nómina']);

      Marca := ClientModule1.cdOrganizacion.Bookmark;
      try
        ClientModule1.cdOrganizacion.DisableControls;
        ClientModule1.cdOrganizacion.First;
        while Not ClientModule1.cdOrganizacion.Eof do
        begin
          cbIdOrganizacion.Items.AddObject(ClientModule1.cdOrganizacion.FieldByName('TituloOrganizacion').AsString, TObject(ClientModule1.cdOrganizacion.FieldByName('IdOrganizacion').AsInteger));

          ClientModule1.cdOrganizacion.Next;
        end;
      finally
        if ClientModule1.cdOrganizacion.BookmarkValid(Marca) then
          ClientModule1.cdOrganizacion.GotoBookmark(Marca);

        ClientModule1.cdOrganizacion.EnableControls;
      end;

      if Not CargarDatosFiltrados(cdTipoNomina, 'SoloSal', ['Si']) then
        raise InteligentException.CreateByCode(16, ['Tipos de Salario']);
      cdTipoNomina.Open;
      if cdTipoNomina.RecordCount = 0 then
        raise InteligentException.CreateByCode(30, ['Tipos de Nómina']);
      cdTipoNomina.First;
      while Not cdTipoNomina.Eof do
      begin
        cbIdTipoNomina.Items.AddObject(cdTipoNomina.FieldByName('Titulo').AsString, TObject(cdTipoNomina.FieldByName('IdTipoNomina').AsInteger));

        cdTipoNomina.Next;
      end;

      Seleccionados := TStringList.Create;
      Seleccionados.Clear;

      memSeleccionados.CreateDataSet;

      cbIdOrganizacion.ItemIndex := 0;
      cbIdTipoNomina.ItemIndex := 0;
    finally
      Screen.Cursor := LocCursor;
    end;
  except
    on e:InteligentException do
    begin
      InteliDialog.ShowModal(e.Title, e.Message, e.MsgType, [mbOk], 0);
      PostMessage(Self.Handle, WM_CLOSE, 0, 0);
    end;

    on e:Exception do
    begin
      InteliDialog.ShowModal(IDTituloError, IDLabelError + e.Message, mtError, [mbOk], 0);
      PostMessage(Self.Handle, WM_CLOSE, 0, 0);
    end;
  end;
end;

procedure TFrmModificacionSalarioEmpleado.tvAnalisisCustomDrawCell(
  Sender: TcxCustomGridTableView; ACanvas: TcxCanvas;
  AViewInfo: TcxGridTableDataCellViewInfo; var ADone: Boolean);
var
  i: Integer;
begin
  if assigned(AViewInfo) and assigned(AViewInfo.GridRecord) then
  begin
    i := Seleccionados.IndexOf(AViewInfo.GridRecord.Values[0]);
    if i >= 0 then
    begin
      ACanvas.Brush.Color := clRed;
      ACanvas.Font.Color := clBlack;
    end
    else
    begin
      ACanvas.Brush.Color := clWhite;
      ACanvas.Font.Color := clBlack;
    end;
  end;
end;

procedure TFrmModificacionSalarioEmpleado.tvAnalisisDblClick(Sender: TObject);
var
  i: Integer;
begin
  // Buscar el numero del empleado en la lista de seleccionados
  i := Seleccionados.IndexOf(cdAnalisis.FieldByName('IdPersonal').AsString);
  if i >= 0 then
  begin
    // Quitar de la lista de Seleccionados
    Seleccionados.Delete(i);
    btnSeleccionar.Caption := '&Seleccionar';
    btnSeleccionar.ImageIndex := 1;
  end
  else
  begin
    // Agregar el empleado seleccionado
    Seleccionados.Add(cdAnalisis.FieldByName('IdPersonal').AsString);
    btnSeleccionar.Caption := '&Deseleccionar';
    btnSeleccionar.ImageIndex := 9;
  end;
  GridAnalisis.Visible := False;
  GridAnalisis.Visible := True;
end;

end.
